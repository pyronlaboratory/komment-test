# frozen_string_literal: true

require 'set' # rubocop:disable Lint/RedundantRequireStatement -- Ruby 3.1 and earlier needs this. Drop this line after Ruby 3.2+ is only supported.

class Compare
  include Gitlab::Utils::StrongMemoize
  include ActsAsPaginatedDiff

  delegate :same, :head, :base, :generated_files, to: :@compare

  attr_reader :project

  def self.decorate(compare, project)
    if compare.is_a?(Compare)
      compare
    else
      self.new(compare, project)
    end
  end

  # initializes an instance of a class, setting properties `@compare`, `@project`,
  # `@base_sha`, and `@straight`.
  # 
  # @param compare [Object] comparison object that specifies the comparison criteria
  # 
  # @param project [Object] project that the compare functionality will be applied to.
  # 
  # @param base_sha [Symbol] base commit hash of the project when the compare functionality
  # is enabled, which is optional and can be provided as nil.
  # 
  # @param straight [Symbol] whether the compare should be performed directly on the
  # base or after some modifications, which is determined by its value of `true` or `false`.
  # 
  # @returns [Object] an instance of the `Initialize` class, initialized with the
  # provided parameters.
  def initialize(compare, project, base_sha: nil, straight: false)
    @compare = compare
    @project = project
    @base_sha = base_sha
    @straight = straight
  end

  # generates a parameter hash containing information about a commit, including its
  # sha and the current branch or a default value if none is provided.
  # 
  # @returns [Hash] a dictionary containing the commit hashes of the specified branches.
  def to_param
    {
      from: @straight ? start_commit_sha : (base_commit_sha || start_commit_sha),
      to: head_commit_sha
    }
  end

  # generates a unique key for caching based on project name and two reference differences.
  # 
  # @returns [Array] a string representation of a cache key comprised of the project
  # slug, the compare operator, and the difference references' hash values.
  def cache_key
    [@project, :compare, diff_refs.hash]
  end

  # generates high-quality documentation for code given to it by returning a
  # `CmitCollection` object containing decorated commits based on provided `@compare.commits`.
  # 
  # @returns [`CommitCollection`.] a `CcommitCollection` object containing decorated
  # commits based on the input `compare.commits`.
  # 
  # 		- `@commits`: A variable that stores an instance of `Commits`, which is a decorated
  # collection of commits generated by combining the original `commits` array with
  # project-specific decorators.
  # 		- `decorated_commits`: An array of `Commit` objects, each representing a commit
  # in the repository, along with any additional information or transformations applied
  # by the project-specific decorators.
  def commits
    @commits ||= begin
      decorated_commits = Commit.decorate(@compare.commits, project)
      CommitCollection.new(project, decorated_commits)
    end
  end

  # creates a new commit object based on the provided base commit and project information
  # if necessary.
  # 
  # @returns [`::Commit`.] a `::Commit` object representing the initial commit for the
  # given project.
  # 
  # 		- `commit`: This is an instance of `Commit`, which represents the commit object
  # in the Git repository. It contains information about the commit, such as its hash,
  # author, and parent commits.
  # 		- `@compare`: This is a class instance variable that stores the compared version
  # of the repository. It is used to determine if the commit is a new commit or an
  # existing one.
  # 		- `project`: This is the project being analyzed by the function. It is used to
  # generate high-quality documentation for the code.
  def start_commit
    strong_memoize(:start_commit) do
      commit = @compare.base

      ::Commit.new(commit, project) if commit
    end
  end

  # creates a new `Commit` object based on the current head commit of a Git repository.
  # 
  # @returns [`::Commit`.] a `Commit` object representing the head of the current
  # branch in the given project.
  # 
  # 		- `commit`: This is a `Commit` object representing the current head commit of
  # the Git repository associated with the `project`.
  # 		- `@compare`: This is an instance variable containing a `Git::Compare` object,
  # which is used to retrieve the head commit.
  def head_commit
    strong_memoize(:head_commit) do
      commit = @compare.head

      ::Commit.new(commit, project) if commit
    end
  end
  alias_method :commit, :head_commit

  # returns the SHA of the current commit.
  # 
  # @returns [String] the SHA of the current commit.
  def start_commit_sha
    start_commit&.sha
  end

  # determines the base commit SHA for a Git repository based on the `start_commit`
  # and `head_commit`.
  # 
  # @returns [`SHA`.] the SHA of the common ancestor commit between the `start_commit`
  # and `head_commit`.
  # 
  # 		- `base_sha`: The base commit SHA, which is the result of the merge between the
  # `start_commit` and `head_commit`.
  # 		- `project`: A reference to the Project object that contains the code being analyzed.
  def base_commit_sha
    strong_memoize(:base_commit) do
      next unless start_commit && head_commit

      @base_sha || project.merge_base_commit(start_commit.id, head_commit.id)&.sha
    end
  end

  # provides the current commit SHA.
  # 
  # @returns [Hash] the SHA of the current Git head.
  def head_commit_sha
    commit&.sha
  end

  # calls the `diffs` method on an instance of the `@compare` object, passing it
  # additional arguments as necessary.
  # 
  # @returns [Array] an array of differences between the original and modified code segments.
  def raw_diffs(...)
    @compare.diffs(...)
  end

  # creates a `Gitlab::Diff::FileCollection::Compare` object to compare the files and
  # directories within a project, providing options for customization.
  # 
  # @param diff_options [` nil` value.] Optional configuration for the GitLab diff
  # toolkit, allowing users to customize the behavior of the comparison process.
  # 
  # 		- `project`: The project object that the diff is being performed on. (Object)
  # 		- `diff_options`: An optional hash containing custom diff options. If present,
  # it overrides any default options. (Hash)
  # 		- `diff_refs`: An array of references to the heads of the branches or tags being
  # compared. (Array of Strings)
  # 
  # 
  # @returns [Class] a new `Gitlab::Diff::FileCollection` object for comparing files
  # within a project.
  def diffs(diff_options = nil)
    Gitlab::Diff::FileCollection::Compare.new(self,
      project: project,
      diff_options: diff_options,
      diff_refs: diff_refs)
  end

  # generates a `Gitlab::Diff::DiffRefs` object that represents the differences between
  # two commits based on their SHA values.
  # 
  # @returns [instance of `Gitlab::Diff::DiffRefs`.] a `Gitlab::Diff::DiffRefs` object
  # containing the diff information between the base and head commits.
  # 
  # 		- `base_sha`: The base commit hash, which represents the starting point for the
  # diff analysis.
  # 		- `start_sha`: The start commit hash, which represents the commit that the diff
  # is being calculated from.
  # 		- `head_sha`: The head commit hash, which represents the current commit being analyzed.
  # 
  # 	These properties are used to create a diff between the base and start commits,
  # and to calculate the relative position of the head commit in relation to these two
  # points.
  def diff_refs
    Gitlab::Diff::DiffRefs.new(
      base_sha: @straight ? start_commit_sha : base_commit_sha,
      start_sha: start_commit_sha,
      head_sha: head_commit_sha
    )
  end

  # retrieves a set of files' old and new path information from a `diffs` object, and
  # returns the set of files as an array.
  # 
  # @returns [Array] an array of tuples containing the old and new paths of each file
  # that has been modified.
  def modified_paths
    paths = Set.new
    diffs.diff_files.each do |diff|
      paths.add diff.old_path
      paths.add diff.new_path
    end
    paths.to_a
  end
end
