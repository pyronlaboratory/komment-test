/**
 * @description creates an HTML fragment containing a clickable `abc` element and a
 * clickable `<a>` element with a handler attached to its `onClick` attribute.
 * 
 * @returns { HTML button element. } a HTML element containing an anchor and a button,
 * both with event listeners attached.
 * 
 * 		- `div`: An HTML division element containing an anchor tag with a click event
 * handler attached to it.
 * 		- `a`: An HTML anchor tag with a click event handler attached to it.
 * 		- `onClick`: The event handler attached to the anchor tag's click event, which
 * will be executed when the tag is clicked.
 */
const elements = () => {
  return (
    <div>
      {/**
       * @description executes when the element is clicked, causing an unspecified action
       * to occur.
       * 
       * @param { `Event`. } onClick - event that triggers the function when the element
       * is clicked.
       * 
       * 		- Type: Function
       * 		- Name: onClick
       * 		- Description: A function that fires when the element is clicked
       */}
      {(!select && !logged) && <div onClick={() => { }}>abc</div>}
      {/**
       * @description performs an action when its button is clicked.
       * 
       * @param { object } onClick - event that triggers the execution of the function when
       * the element is clicked.
       */}
      <a><b onClick={() => { }}></b></a>
    </div>
  )
}

/**
 * @description returns a JSX fragment with two clickable elements: one nested inside
 * the other. When the outer element is clicked, an event is triggered that calls the
 * `onClick` callback; when the inner element is clicked, an event is also triggered
 * that calls the `onClick` callback again, nested within the original one.
 * 
 * @returns { `HTMLDivElement`. } a JSX element containing two clickable elements: a
 * span and a button.
 * 
 * 	The div element with an onClick event listener is present inside the returned
 * elements. When the element is clicked, the event listener will be triggered. The
 * span element with the text "Click me" is contained within this div element.
 * 
 * 	There is another div element within the returned elements. It contains a button
 * element with an onClick event listener that will also be triggered when the button
 * is clicked.
 */
const elements = () => {
  return (
    <div>
      {/**
       * @description when clicked, executes a code block inside it.
       * 
       * @param { `Event` } onClick - event that triggers the function when the element is
       * clicked.
       * 
       * 		- The type of `onClick` is `Function`.
       */}
      {!condition && (
        <div onClick={() => { }}>
          <span>Click me</span>
        </div>
      )}
      <div>
        {/**
         * @description when clicked, executes a second function with the same name.
         * 
         * @param { `Function`. } onClick - event that triggers the execution of the code
         * inside the function when the button is clicked.
         * 
         * 		- The function reference is generated by calling `onClick`.
         * 		- It has one argument (`() => {}`) as its value.
         */}
        <button onClick={() => { }}>Nested Click</button>
      </div>
    </div>
  );
};

/**
 * @description generates a HTML fragment with conditionally rendered content based
 * on a boolean `condition`. If `condition` is true, a button is displayed; otherwise,
 * a message and two links are shown.
 * 
 * @returns { HTML element consisting of a button, paragraph, and unordered list. }
 * a HTML element containing various interactive and informative elements.
 * 
 * 		- The `button` element is represented by the `<button>` tag, which allows users
 * to interact with the application by clicking on it.
 * 		- The `condition` property is a boolean value that determines whether the `button`
 * element should be displayed or not. When `condition` is true, the button is shown;
 * otherwise, it is hidden.
 * 		- The `conditional content` property is represented by the `<div>` tag, which
 * contains content that depends on the value of the `condition` property. When
 * `condition` is true, this element is displayed; otherwise, it is hidden.
 * 		- The `link` property is a URL that is linked to the application's functionality
 * when the user clicks on the `button`.
 * 		- The `li` elements are represented by the `<li>` tag, which contains text content
 * that can be interacted with by the user. There are two `li` elements in this example.
 */
const elements = () => {
  return (
    <div>
      {/**
       * @description when clicked, executes an unknown action.
       * 
       * @param { `Event`. } onClick - event that triggers the function's execution when
       * the button is clicked.
       * 
       * 		- Function type: The `onClick` property is of type `Function`.
       */}
      {condition ? (
        <button onClick={() => { }}>Click me</button>
      ) : (
        <div>
          <p>Conditional content</p>
          <a href="#">Link</a>
        </div>
      )}
      <ul>
        {/**
         * @description executes an action when its container element is clicked.
         * 
         * @param { function. } onClick - event triggering the function's execution.
         * 
         * 		- Function type: `Function`
         * 		- Execution context: Global scope
         * 		- Lambda form: Yes
         * 		- Arity: 0 (no arguments)
         * 		- Keyword arguments: No
         * 		- Rest parameters: No
         */}
        <li onClick={() => { }}>Item 1</li>
        <li>Item 2</li>
      </ul>
    </div>
  );
};

/**
 * @description generates a layout that allows users to log in or access an array of
 * items. When logged in, a "Logout" button is displayed; otherwise, a login form
 * with fields for username and password is shown, and an "Login" button becomes clickable.
 * 
 * @returns { HTML division element (`<div>`). } a HTML div container containing login
 * and logout buttons and an input field for entering a username and password.
 * 
 * 		- `div`: A container element that holds all other elements. It has a class
 * attribute set to "Elements".
 * 		- `button`: An input element of type "submit" that allows the user to log in or
 * log out. If `isLoggedIn` is true, it is disabled and displays the text "Logout".
 * Otherwise, it is enabled and displays the text "Login".
 * 		- `input`: A pair of input elements of types "text" and "password" respectively.
 * They have placeholder texts set to "Username" and "Password".
 * 		- `ul`: A list element that holds a list of items. Each item is represented by
 * a list item element (`li`). The `key` attribute of each `li` element is set to the
 * index of the item in the array.
 * 		- `items`: An array of objects that contain the text to be displayed as a list
 * item.
 */
const elements = () => {
  return (
    <div>
      {/**
       * @description logs out the user from the application.
       * 
       * @param { function. } onClick - event that triggers the execution of the function
       * when the button is clicked.
       * 
       * 		- `()`: An anonymous function that will be called when the button is clicked.
       * 		- `onClick`: A string representing the event name that triggers the function.
       */}
      {isLoggedIn ? (
        <button onClick={() => { }}>Logout</button>
      ) : (
        <div>
          <input type="text" placeholder="Username" />
          <input type="password" placeholder="Password" />
          {/**
           * @description triggers an event upon clicking, indicating user login attempt.
           * 
           * @param { functions call. } onClick - event triggering the execution of the function
           * and is used to handle user interactions with the button.
           * 
           * 		- `onClick`: The event handler function that is executed when the button is clicked.
           */}
          <button onClick={() => { }}>Login</button>
        </div>
      )}
      {/**
       * @description lists items provided as its argument in an unordered list, each item
       * represented by a list item (`li`). When an `li` is clicked, an anonymous function
       * is called, providing no arguments.
       */}
      <ul>
        {/**
         * @description maps an element to its index number, allowing for direct access and
         * manipulation of elements in a list through their index numbers.
         * 
         * @param { integer } key - unique identifier for each list item, which is used to
         * map the items to their corresponding values in the original data source.
         * 
         * @param { `Function`. } onClick - event triggered when the li element is clicked,
         * allowing for further processing or action to be taken upon user interaction with
         * the list item.
         * 
         * 		- `onClick`: This is the primary property of the `li` element that is responsible
         * for triggering an action when the user clicks on it.
         * 		- `function`: This represents the callback function that will be called when the
         * user clicks on the `li`. The function takes no arguments.
         */}
        {items.map((item, index) => (
          <li key={index} onClick={() => { }}>{item}</li>
        ))}
      </ul>
    </div>
  );
};
